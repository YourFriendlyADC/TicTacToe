/* autogenerated by Processing revision 1286 on 2022-12-24 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class TTT extends PApplet {

PFont font;
PImage settings, noVol, vol, icon, reset;
boolean game = true, volume = true, themeBoard = false, lgBoard = false, ended = false;
String language = "EN", settingsText, themeText, lgText, exitText, backText;
int boxes[] = new int[9], player = 1, i = 0, restartX, settingsX, themeX, lgX, exitX, backX, theme = 2;

 public void setup() {
  /* size commented out by preprocessor */;
  settings = loadImage("images/settings.png");
  noVol = loadImage("images/noVol.png");
  vol = loadImage("images/vol.png");
  font = loadFont("BookmanOldStyle-Bold-20.vlw");
  icon = loadImage("images/icon.png");
  reset = loadImage("images/reset.png");
  surface.setIcon(icon);
  textFont(font);
}

 public void draw() {  
  // Theme setting
  if (theme == 1) {
    background(254, 250, 224);
  } else {
    background(241, 250, 238);
  }
  
  // Language setting
  if (language == "EN") {
    settingsText = "Settings";
    themeText = "Theme";
    lgText = "Language";
    exitText = "Exit";
    backText = "Back";
  } else if (language == "ES") {
    settingsText = "Ajustes";
    themeText = "Tema";
    lgText = "Idioma";
    exitText = "Salir";
    backText = "Atrás";
  } else if (language == "IT") {
    settingsText = "Impostazioni";
    themeText = "Tema";
    lgText = "Lingua";
    exitText = "Uscita";
    backText = "Indietro";
  } else if (language == "FR") {
    settingsText = "Paramètres";
    themeText = "Thème";
    lgText = "Langue";
    exitText = "Sortie";
    backText = "Revenir";
  } else if (language == "DE") {
    settingsText = "Konfigurationen";
    themeText = "Thema";
    lgText = "Sprache";
    exitText = "Verlassen";
    backText = "Zurück";
  }
  
  // Tab Setting
  if (game) {
    drawBoard();
    if (mousePressed && !ended) {
      setTrain(player);
    }
  } else {
    settingsMenu();
  }
}
 public void drawBoard() {
  // Board
  if (theme == 1) {
    fill(186, 228, 146);
  } else {
    fill(255, 217, 125);
  }
  strokeWeight(0);
  rect(25, 25, 450, 450, 15, 15, 15, 15);
  strokeWeight(3);
  stroke(0);
  noFill();
  rect(25, 25, 450, 450, 15, 15, 15, 15);
  fill(40, 54, 24);  
  line(25, 170, 475, 170);
  line(25, 325, 475, 325);
  line(170, 25, 170, 475);
  line(325, 25, 325, 475);
  boxIlumination();
  drawSign();  
  
  // Title
  fill(0);
  textSize(20);
  text("Tic Tac Toe", 500, 30, 220, 30);
  line(500, 50, 625, 50);
  
  // Small Board
  if (theme == 1) {
    fill(221, 161, 94);
  } else {
    fill(168, 218, 220);
  }
  strokeWeight(3);
  line(500, 207, 625, 207);
  settingWinner();
  
  // Restart Button  
  if (theme == 1) {
    fill(221, 161, 94);
  } else {
    fill(168, 218, 220);
  }
  stroke(0);
  strokeWeight(3); // 565
  ellipse(540, 285, 40, 40);
  image(reset, 528, 272);
  if ((mouseX > 520) && (mouseX < 560) && (mouseY > 265) && (mouseY < 305) && (mousePressed)) {
    for(i = 0; i <= 8; i++) {
      boxes[i] = 0 ;
    }
    ended = false;
  }
  
  // Settings Button
  if (theme == 1) {
    fill(221, 161, 94);
  } else {
    fill(168, 218, 220);
  }
  stroke(0);
  strokeWeight(3); // 565
  ellipse(590, 285, 40, 40);
  image(settings, 578, 273);
  // Changes the Tab
  if ((mouseX > 570) && (mouseX < 610) && (mouseY > 265) && (mouseY < 305) && (mousePressed)) {
    game = !game;
  }  
}

 public void boxIlumination() {
  fill(255, 255, 252);
  if ((mouseX > 25) && (mouseX < 170) && (mouseY > 25) && (mouseY < 170)) { // Cuadros
    cursor(HAND);
    strokeWeight(0);
    rect(27, 27, 142, 142, 15, 0, 0, 0);
  } else if ((mouseX > 170) && (mouseX < 325) && (mouseY > 25) && (mouseY < 170)) { // Cuadro 2
    cursor(HAND);
    strokeWeight(0);
    rect(172, 27, 152, 142);
  } else if ((mouseX > 325) && (mouseX < 475) && (mouseY > 25) && (mouseY < 170)) { // Cuadro 3
    cursor(HAND);
    strokeWeight(0);
    rect(327, 27, 147, 142, 0, 15, 0, 0);
  } else if ((mouseX > 25) && (mouseX < 170) && (mouseY > 170) && (mouseY < 325)) { // Cuadro 4
    cursor(HAND);
    strokeWeight(0);
    rect(27, 172, 142, 152);
  } else if ((mouseX > 170) && (mouseX < 325) && (mouseY > 170) && (mouseY < 325)) { // Cuadro 5
    cursor(HAND);
    strokeWeight(0);
    rect(172, 172, 152, 152);
  } else if ((mouseX > 325) && (mouseX < 475) && (mouseY > 170) && (mouseY < 325)) { // Cuadro 6
      cursor(HAND);
      strokeWeight(0);
      rect(327, 172, 147, 152);
  } else if ((mouseX > 25) && (mouseX < 170) && (mouseY > 325) && (mouseY < 475)) { // Cuadro 7
    cursor(HAND);
    strokeWeight(0);
    rect(27, 327, 142, 147, 0, 0, 0, 15);
  } else if ((mouseX > 170) && (mouseX < 325) && (mouseY > 325) && (mouseY < 475)) { // Cuadro 8
    cursor(HAND);
    strokeWeight(0);
    rect(172, 327, 152, 147);
  } else if ((mouseX > 325) && (mouseX < 475) && (mouseY > 325) && (mouseY < 475)) { // Cuadro 9
    cursor(HAND);
    strokeWeight(0);
    rect(327, 327, 147, 147, 0, 0, 15, 0);
  } else {
    cursor(ARROW);
  }
}
 public int calculateBox() {
  if ((mouseX > 25) && (mouseX < 170) && (mouseY > 25) && (mouseY < 170) && (mousePressed)) {
    return 0;
  } else if ((mouseX > 170) && (mouseX < 325) && (mouseY > 25) && (mouseY < 170) && (mousePressed)) {
    return 1;
  } else if ((mouseX > 325) && (mouseX < 475) && (mouseY > 25) && (mouseY < 170) && (mousePressed)) {
    return 2;
  } else if ((mouseX > 25) && (mouseX < 170) && (mouseY > 170) && (mouseY < 325) && (mousePressed)) {
    return 3;
  } else if ((mouseX > 170) && (mouseX < 325) && (mouseY > 170) && (mouseY < 325) && (mousePressed)) {
    return 4;
  } else if ((mouseX > 325) && (mouseX < 475) && (mouseY > 170) && (mouseY < 325) && (mousePressed)) {
    return 5;
  } else if ((mouseX > 25) && (mouseX < 170) && (mouseY > 325) && (mouseY < 475) && (mousePressed)) {
    return 6;
  } else if ((mouseX > 170) && (mouseX < 325) && (mouseY > 325) && (mouseY < 475) && (mousePressed)) {
    return 7;
  } else if ((mouseX > 325) && (mouseX < 475) && (mouseY > 325) && (mouseY < 475) && (mousePressed)) {
    return 8;
  }
  return -1;
}

 public boolean viewWinner() {
  return (boxes[0] == player && boxes[1] == player && boxes[2] == player) ||
         (boxes[3] == player && boxes[4] == player && boxes[5] == player) ||
         (boxes[6] == player && boxes[7] == player && boxes[8] == player) ||
         (boxes[0] == player && boxes[3] == player && boxes[6] == player) ||
         (boxes[1] == player && boxes[4] == player && boxes[7] == player) ||
         (boxes[2] == player && boxes[5] == player && boxes[8] == player) ||
         (boxes[0] == player && boxes[4] == player && boxes[8] == player) ||
         (boxes[2] == player && boxes[4] == player && boxes[6] == player);
}

 public void setTrain(int p) {
  if (calculateBox() != -1) {
    // IA
    //if (player == 2) {
    //  int rdm = int(random(0, 8));
    //  if (boxes[rdm] == 0 ) {
    //    boxes[rdm] = p;
    //    if (viewWinner() || isDraw()) {
    //      ended = true;
    //    } else if (player == 1) {
    //      player = 2;
    //    } else {
    //      player = 1;
    //    }
    //  }
    //}
    // Human
    //if (player == 1) {
      if (boxes[calculateBox()] == 0 ) {
        boxes[calculateBox()] = p;
        if (viewWinner() || isDraw()) {
          ended = true;
        } else if (player == 1) {
          player = 2;
        } else {
          player = 1;
        }
      }
    //}
  }
}

 public void drawSign() {
  noFill();
  strokeWeight(5);
  for (int i = 0; i < 9; i++) {
    if (boxes[i] == 1) {
      stroke(128, 147, 241);
      ellipse((i % 3) * 150 + 100, (i / 3) * 150 + 100, 95, 95);
    }
    if (boxes[i] == 2) {
      stroke(255, 104, 107);
      ellipse((i % 3) * 150 + 100, (i / 3) * 150 + 100, 95, 95);
    }
  }
  stroke(0);  
  strokeWeight(3);
}

 public void settingWinner() {
  if (!ended) {
    fill(0);
    text("Turn", 538, 198);
    if (player == 1) {
      fill(50, 50, 250);
      text("Blue", 540, 230);
    } else {
      fill(250, 50, 50);
      text("Red", 545, 230);
    }
  } else {
    if (viewWinner()) {
      if (player == 1) {
        fill(50, 50, 250);
        text("Blue" + " wins!!", 508, 198);
      } else {
        fill(250, 50, 50);
        text("Red" + " wins!!", 510, 198);
      }    
    } else if (isDraw()) {
      fill(0);
      text("Draw...", 525, 198);
    }
    fill(0);
    text("Press Restart", 495, 230);
  }
}

 public boolean isDraw() {
  int noZeros = 0;
  i = 0;
  while (i <= 8) {    
    if (boxes[i] != 0) {
      noZeros++;
    }
    i++;
  }
  if (noZeros == 9) {
    return true;
  }
  return false;
}
 public void settingsMenu() {
  // Title
  fill(0);
  strokeWeight(3);
  textSize(25);
  switch (settingsText) {
    case "Settings":
      settingsX = width / 2 - 52;
      break;
    case "Ajustes":
      settingsX = width / 2 - 46;
      break;
    case "Impostazioni":
      settingsX = width / 2 - 85;
      break;
    case "Paramètres":
      settingsX = width / 2 - 72;
    case "Konfigurationen":
      settingsX = width / 2 - 105;
      break;
  }
  text(settingsText, settingsX, 30, 230, 40);
  if (theme == 1) {
    fill(221, 161, 94);
  } else {
    fill(168, 218, 220);
  }  
  ellipse(width / 2, 320, 50, 50);
  if (volume) {
    image(vol, width / 2 - 18, 302);
  } else {
    image(noVol, width / 2 - 18, 302);
  }
  rect(width / 2 - 70, 100, 140, 45, 25, 25, 25, 25);
  rect(width / 2 - 70, 160, 140, 45, 25, 25, 25, 25);
  rect(width / 2 - 70, 220, 140, 45, 25, 25, 25, 25);
  // Texts
  fill(0);
  textSize(20);
  switch (themeText) {
    case "Theme":
    case "Thème":
    case "Thema":
      themeX = width / 2 - 35;
      break;
    case "Tema":
      themeX = width / 2 - 28;
      break;
  }
  text(themeText, themeX, 115, 100, 40);
  switch (lgText) {
    case "Language":        
      lgX = width / 2 - 48;
      break;
    case "Lingua":
    case "Idioma":
    case "Langue":
      lgX = width / 2 - 35;
      break;
    case "Sprache":
      lgX = width / 2 - 42;
      break;
  }
  text(lgText, lgX, 175, 120, 40);
  switch (exitText) {
    case "Exit":
      exitX = width / 2 - 22;
      break;
    case "Salir":
      exitX = width / 2 - 24;
      break;
    case "Uscita":
    case "Sortie":
      exitX = width / 2 - 30;
      break;
    case "Verlassen":
      exitX = width / 2 - 48;
      break;
  }
  text(exitText, exitX, 235, 110, 40);
  textSize(16);
  text("Created by: YourFriendlyADC", 220, 480, 420, 30);
  // Theme
  if ((mouseX > width / 2 - 70) && (mouseX < width / 2 + 70) && (mouseY > 100) && (mouseY < 145) && (mousePressed)) {
    themeBoard = true;
  } else if (!((mouseX > width / 2 - 70) && (mouseX < width / 2 + 160) && (mouseY > 100) && (mouseY < 145))) {
    themeBoard = false;
  }
  if (themeBoard) {
    strokeWeight(2);
    // Theme 1
    fill(254, 250, 224);
    rect(width / 2 + 80, 105, 13, 35, 10, 0, 0, 10);
    fill(221, 161, 94);
    rect(width / 2 + 93, 105, 14, 35);
    fill(186, 228, 146);
    rect(width / 2 + 107, 105, 13, 35, 0, 10, 10, 0);
    // Theme 2
    fill(241, 250, 238);
    rect(width / 2 + 120, 105, 13, 35, 10, 0, 0, 10);
    fill(69, 123, 157);
    rect(width / 2 + 133, 105, 14, 35);
    fill(255, 217, 125);
    rect(width / 2 + 147, 105, 13, 35, 0, 10, 10, 0);
    //
    strokeWeight(0);
    fill(221, 161, 94);
    strokeWeight(3);
    noFill();
    line(width / 2 + 70, 122, width / 2 + 80, 122);
    rect(width / 2 + 80, 105, 40, 35, 10, 10, 10, 10);
    rect(width / 2 + 120, 105, 40, 35, 10, 10, 10, 10);
    if ((mouseX > width / 2 + 80) && (mouseX < width / 2 + 120) && (mouseY > 105) && (mouseY < 140) && (mousePressed)) {
      theme = 1;
    } else if ((mouseX > width / 2 + 120) && (mouseX < width / 2 + 160) && (mouseY > 105) && (mouseY < 140) && (mousePressed)) {
      theme = 2;
    }
  }
  // Language
  if ((mouseX > width / 2 - 70) && (mouseX < width / 2 + 70) && (mouseY > 160) && (mouseY < 205) && (mousePressed)) {
    lgBoard = true;
  } else if (!((mouseX > width / 2 - 70) && (mouseX < width / 2 + 280) && (mouseY > 160) && (mouseY < 205))) {
    lgBoard = false;
  }
  if (lgBoard) {
    // Flags
    strokeWeight(2);
    // ES
    fill(220, 30, 30);
    rect(width / 2 + 80, 170, 40, 25, 5, 5, 5, 5);
    fill(220, 220, 30);
    rect(width / 2 + 80, 177, 40, 11);
    // EN
    fill(50, 50, 210);
    rect(width / 2 + 120, 170, 40, 25, 5, 5, 5, 5);
    fill(255);
    rect(width / 2 + 120, 178, 40, 8);
    rect(width / 2 + 136, 170, 8, 25);
    stroke(255);
    strokeWeight(4);
    line(width / 2 + 120, 170, width / 2 + 160, 195);
    line(width / 2 + 120, 195, width / 2 + 160, 170);
    stroke(0);
    strokeWeight(0);
    fill(220, 50, 50);
    rect(width / 2 + 139, 170, 3, 25);
    rect(width / 2 + 120, 181, 40, 3);
    stroke(220, 50, 50);
    strokeWeight(2);
    line(width / 2 + 120, 170, width / 2 + 160, 195);
    line(width / 2 + 120, 195, width / 2 + 160, 170);
    // IT
    stroke(0);
    strokeWeight(2);
    fill(70, 200, 70);
    rect(width / 2 + 160, 170, 13, 25, 5, 0, 0, 5);
    fill(244);
    rect(width / 2 + 173, 170, 14, 25);
    fill(240, 40, 40);
    rect(width / 2 + 187, 170, 13, 25, 0, 5, 5, 5);
    // FR
    stroke(0);
    strokeWeight(2);
    fill(70, 70, 200);
    rect(width / 2 + 200, 170, 13, 25, 5, 0, 0, 5);
    fill(244);
    rect(width / 2 + 213, 170, 14, 25);
    fill(240, 40, 40);
    rect(width / 2 + 227, 170, 13, 25, 0, 5, 5, 0);
    // DE
    fill(10, 10, 10);
    rect(width / 2 + 240, 170, 40, 8, 0, 5, 0, 0);
    fill(220, 30, 30);
    rect(width / 2 + 240, 178, 40, 9);
    fill(220, 220, 30);
    rect(width / 2 + 240, 187, 40, 8, 0, 0, 5, 0);
    //
    strokeWeight(0);
    fill(221, 161, 94);
    strokeWeight(3);
    noFill();
    rect(width / 2 + 80, 170, 200, 25, 5, 5, 5, 5);
    line(width / 2 + 70, 182, width / 2 + 80, 182);    
    line(width / 2 + 120, 170, width / 2 + 120, 195);
    line(width / 2 + 160, 170, width / 2 + 160, 195);
    // Language Selection
    if ((mouseX > width / 2 + 80) && (mouseX < width / 2 + 120) && (mouseY > 170) && (mouseY < 195) && (mousePressed)) {
      language = "ES";
    } else if ((mouseX > width / 2 + 120) && (mouseX < width / 2  + 160) && (mouseY > 170) && (mouseY < 195) && (mousePressed)) {
      language = "EN";
    } else if ((mouseX > width / 2 + 160) && (mouseX < width / 2 + 200) && (mouseY > 170) && (mouseY < 195) && (mousePressed)) {
      language = "IT";
    } else if ((mouseX > width / 2 + 200) && (mouseX < width / 2 + 240) && (mouseY > 170) && (mouseY < 195) && (mousePressed)) {
      language = "FR";
    } else if ((mouseX > width / 2 + 240) && (mouseX < width / 2 + 280) && (mouseY > 170) && (mouseY < 195) && (mousePressed)) {
      language = "DE";
    }
  }
  // Back
  strokeWeight(3);
  if (theme == 1) {
    fill(221, 161, 94);
  } else {
    fill(168, 218, 220);
  }
  rect(width - 100, height - 50, 80, 30, 15, 15, 15, 15);
  textSize(16);
  fill(0);
  switch (backText) {
    case "Back":
      backX = width - 80;
      break;
    case "Atrás":
      backX = width - 82;
      break;
    case "Revenir":
      backX = width - 90;
      break;
    case "Indietro":          
      backX = width - 92;
      break;
    case "Zurück":
      backX = width - 86;
      break;
  }
  text(backText, backX, height - 30);
  if ((mouseX > width - 100) && (mouseX < width - 20) && (mouseY > height - 50) && (mouseY < height - 20) && (mousePressed)) {
    game = true;
  }
  // Exit
  if ((mouseX > width / 2 - 70) && (mouseX < width / 2 + 70) && (mouseY > 220) && (mouseY < 265) && (mousePressed)) {
    exit();
  }
  // Sound
  if (((mouseX > width / 2 - 25) && (mouseX < width / 2 + 25) && (mouseY > 295) && (mouseY < 345) && (mousePressed)) && volume) {
    volume = false;
  } else if (((mouseX > width / 2 - 25) && (mouseX < width / 2 + 25) && (mouseY > 295) && (mouseY < 345) && (mousePressed)) && !volume) {
    volume = true;
  }
}


  public void settings() { size(650, 500); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "TTT" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
